name: Build and Deploy Docker Image to Cloudtype

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행

env: # 환경 변수 정의
  REGISTRY: ghcr.io # GitHub Container Registry 사용
  IMAGE_NAME: ${{ github.repository }} # 이미지 이름은 GitHub 저장소 이름으로 설정

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # ghcr.io에 푸시하기 위해 필요

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3 # 코드 체크아웃

      # Firebase 인증서 설정 (기존 유지)
      - name: Set up Firebase credentials
        run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" > serviceAccountKey.json

      # Docker 레지스트리 로그인
      - name: Log in to the Container registry
        uses: docker/login-action@v3 # 최신 버전 사용
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # ghcr.io에 푸시할 때 GitHub에서 제공하는 토큰 사용

      # Docker 이미지 메타데이터 추출 (태그 등)
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5 # 최신 버전 사용
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha # 커밋 SHA를 태그로 사용

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5 # 최신 버전 사용
        with:
          context: . # Dockerfile이 있는 경로
          push: true # 레지스트리로 푸시
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Cloudtype 공식 배포 액션 사용
      - name: Deploy to Cloudtype
        uses: cloudtype-github-actions/deploy@v1
        with:
          token: ${{ secrets.CLOUDTYPE_TOKEN }} # Cloudtype API 키
          project: madksj/nugulmap # 확인된 스페이스/프로젝트 이름
          # file 대신 yaml 파라미터를 사용하여 인라인으로 cloudtype.yml 내용 전달
          yaml: |
            name: nugulmap # Cloudtype 서비스 이름
            app: nugulmap # 애플리케이션 이름 (서비스 이름과 동일)
            type: dockerfile # Dockerfile 기반 배포 명시
            build: # Dockerfile 빌드 관련 설정
              dockerfile: ./Dockerfile # Dockerfile 경로
            run: # 애플리케이션 실행 명령어
              command: uvicorn main:app --host 0.0.0.0 --port 8000
            options:
              image: ${{ steps.meta.outputs.tags }} # 빌드된 Docker 이미지 태그 사용
              ports:
                - 8000 # 애플리케이션이 리스닝하는 포트